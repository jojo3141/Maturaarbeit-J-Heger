import keyboard
import time
import random

original_positions = [0,1,2,3,4,5,6,7]
current_positions = original_positions
print(current_positions)

#Definitions for U/F/R/D/F/B-turns
def U_turn(list):
    new_positions = [list[3],list[0],list[1],list[2],
                     list[4],list[5],list[6],list[7]]
    return new_positions
def F_turn(list):
    new_positions = [list[4],list[1],list[2],list[0],
                     list[7],list[5],list[6],list[3]]
    return new_positions
def R_turn(list):
    new_positions = [list[0],list[1],list[3],list[7],
                     list[4],list[5],list[2],list[6]]
    return new_positions
def L_turn(list):
    new_positions = [list[1],list[5],list[2],list[3],
                     list[0],list[4],list[6],list[7]]
    return new_positions
def D_turn(list):
    new_positions = [list[0],list[1],list[2],list[3],
                     list[5],list[6],list[7],list[4]]
    return new_positions
def B_turn(list):
    new_positions = [list[0],list[2],list[6],list[3],
                     list[4],list[1],list[5],list[7]]
    return new_positions

#Definitions of inverted turns
def Ui_turn(list):
    return U_turn(U_turn(U_turn(list)))
def Fi_turn(list):
    return F_turn(F_turn(F_turn(list)))
def Ri_turn(list):
    return R_turn(R_turn(R_turn(list)))
def Li_turn(list):
    return L_turn(L_turn(L_turn(list)))
def Di_turn(list):
    return D_turn(D_turn(D_turn(list)))
def Bi_turn(list):
    return B_turn(B_turn(B_turn(list)))

normal_moves = [U_turn, F_turn, R_turn, L_turn, D_turn, B_turn]
inverted_moves = [Ui_turn, Fi_turn, Ri_turn, Li_turn, Di_turn, Bi_turn]

list_of_possible_moves = normal_moves + inverted_moves







def do_alg(current_positions, list_of_moves):
    print("This is the starting position:", current_positions)
    for turn in list_of_moves:
        current_positions = turn(current_positions)
    print("The alg is done, the position is now:", current_positions)
    return current_positions

def do_alg_silent(current_positions, list_of_moves):
    for move in list_of_moves:
        current_positions = move(current_positions)
    return current_positions


def reverse_alg(alg):
    alg = list(reversed(alg))                      #read the alg backwards

    for i in range(6):                             #every inverted turn gets normal and vice versa
        for j in range(len(alg)):
            if alg[j] == normal_moves[i]:
                alg[j] = inverted_moves[i]
            elif alg[j] == inverted_moves[i]:
                alg[j] = normal_moves[i]
    return alg


alg1 = [U_turn, F_turn, U_turn, F_turn, U_turn, F_turn, U_turn, F_turn, U_turn, F_turn,]
alg_sexy_move = [R_turn, U_turn, Ri_turn, Ui_turn]








"""
do_alg(current_positions, alg_sexy_move*6)
"""

scrambled_positions = do_alg_silent(current_positions, [F_turn, R_turn, Bi_turn])
print(f"These are the scrambled positions {scrambled_positions}")
i=0
while True:
    i+=1
    random_move1 = random.choice(list_of_possible_moves)
    random_move2 = random.choice(list_of_possible_moves)
    random_move3 = random.choice(list_of_possible_moves)
    print(i, "th Try with the moves:", random_move1.__name__,", ", random_move2.__name__,", ", random_move3.__name__, sep="")
    if scrambled_positions == do_alg_silent(original_positions,[random_move1, random_move2, random_move3]):
        print("I found the Solution:", [move.__name__ for move in reverse_alg([random_move1, random_move2, random_move3])])
        print("The scramble was:", [move.__name__ for move in reverse_alg(reverse_alg([random_move1, random_move2, random_move3]))])
        #string_list = [move.__name__ for move in reverse_alg([random_move1, random_move2, random_move3])]
        break










"""
while True:
    if keyboard.read_key() == "u":
        current_positions = U_turn(current_positions)
        print("U", current_positions)
        time.sleep(0.2)
    if keyboard.read_key() == "f":
        current_positions = F_turn(current_positions)
        print("F", current_positions)
        time.sleep(0.2)
    if keyboard.read_key() == "r":
        current_positions = R_turn(current_positions)
        print("R", current_positions)
        time.sleep(0.2)
    if keyboard.read_key() == "l":
        current_positions = Ui_turn(current_positions)
        print("L", current_positions)
        time.sleep(0.2)
    if keyboard.read_key() == "d":
        current_positions = Ui_turn(current_positions)
        print("D", current_positions)
        time.sleep(0.2)
    if keyboard.read_key() == "b":
        current_positions = Ui_turn(current_positions)
        print("B", current_positions)
        time.sleep(0.2)

"""
